Research starting 9/27

https://mui.com/components/data-grid/
Material UI Data Grid
-display information in a grid like format using rows and columns

-2 versions: MIT licensed and commercially licensed
-MIT
    -table demo with claen abstraction
    -import { DataGrid } from '@mui/x-data-grid';
-Commercial
    -can go to thousands of rows and columns
    -more advanced thaan MIT 
    -import {DataGridPro} from '@mui/x-data-grid-pro';


https://codesandbox.io/s/material-demo-forked-hjlv8?file=/demo.js 
- demo code for data grid with material UI
import * as React from "react";
import { DataGrid } from "@mui/x-data-grid";
const columns = [
  //field is way of identification, and headname is what the user sees
  //"editable" lets the user change the text in the column
  { field: "id", headerName: "ID", width: 90 },
  {
    field: "firstName",
    headerName: "First name",
    width: 150,
    editable: true
  },
  {
    field: "lastName",
    headerName: "Last name",
    width: 150,
    editable: true
  },
  {
    field: "age",
    headerName: "Age",
    type: "number",
    width: 110,
    editable: true
  },
  {
    field: "fullName",
    headerName: "Full name",
    description: "This column has a value getter and is not sortable.",
    sortable: false,
    //won't let the user switch the first and last name 
    width: 160,
    valueGetter: (params) =>
      `${params.getValue(params.id, "firstName") || ""} ${
        params.getValue(params.id, "lastName") || ""
        //this function allows values (in this case any name), to be pulled from anywhere)
      }`
  }
];

const rows = [
  { id: 1, lastName: "Snow", firstName: "Jon", age: 35 },
  { id: 2, lastName: "Lannister", firstName: "Cersei", age: 42 },
  { id: 3, lastName: "Lannister", firstName: "Jaime", age: 45 },
  { id: 4, lastName: "Stark", firstName: "Arya", age: 16 },
  { id: 5, lastName: "Targaryen", firstName: "Daenerys", age: null },
  { id: 6, lastName: "Melisandre", firstName: null, age: 150 },
  { id: 7, lastName: "Clifford", firstName: "Ferrara", age: 44 },
  { id: 8, lastName: "Frances", firstName: "Rossini", age: 36 },
  { id: 9, lastName: "Roxie", firstName: "Harvey", age: 65 }
];
//^^text in the column

export default function DataGridDemo() {
  return (
    <div style={{ height: 400, width: "100%" }}>
      <DataGrid
        rows={rows}
        columns={columns}
        checkboxSelection
        disableSelectionOnClick
        //^^lets user check off the checkbox 
        //disables double clcik
      />
    </div>
  );
}


https://blog.ag-grid.com/react-get-started-with-react-grid-in-5-minutes/
- Data Grid without Material UI aka AG Grid
- handles business level data volumes 
-allows to enable features such as toggles, a mini menu for filtering, moving controls ,and edits in rows


https://medium.com/swlh/create-a-responsive-grid-with-react-flexbox-styled-components-f7a55f607480
- Create a Responsive Grid with REACT, Flexbox and Styled components
-no more CSS frameworks (unecessary stuff)
-shows how to understand styled componenets 

Differences and Similarities of Material UI and AG Grid:
-Differences:
  -AG grid has aa built in option for mataerial theme styling, meaning it can export to excel and can do row grouping
  -AG can multisort and is easily customizable and can easily adapt to design changes
  -Material UI has CSS framework and REACT components thaat utilize Google's material design
    -good starter for beginners
- Similarities
  -both can sort, filter, search, and change order and size of columns
  -have common REACT project bundler set up

  AG Data Grid:
  Old code on BandilaData.js will be on Notion